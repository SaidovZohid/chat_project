// Code generated by MockGen. DO NOT EDIT.
// Source: ../../genproto/chat_service/chat_message_service_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chat_service "gitlab.com/telegram_clone/api_gateway/genproto/chat_service"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMessageServiceClient is a mock of MessageServiceClient interface.
type MockMessageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceClientMockRecorder
}

// MockMessageServiceClientMockRecorder is the mock recorder for MockMessageServiceClient.
type MockMessageServiceClientMockRecorder struct {
	mock *MockMessageServiceClient
}

// NewMockMessageServiceClient creates a new mock instance.
func NewMockMessageServiceClient(ctrl *gomock.Controller) *MockMessageServiceClient {
	mock := &MockMessageServiceClient{ctrl: ctrl}
	mock.recorder = &MockMessageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceClient) EXPECT() *MockMessageServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageServiceClient) Create(ctx context.Context, in *chat_service.ChatMessage, opts ...grpc.CallOption) (*chat_service.ChatMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*chat_service.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockMessageServiceClient) Delete(ctx context.Context, in *chat_service.ChatIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageServiceClient)(nil).Delete), varargs...)
}

// GetAll mocks base method.
func (m *MockMessageServiceClient) GetAll(ctx context.Context, in *chat_service.GetAllMessagesParams, opts ...grpc.CallOption) (*chat_service.GetAllMessages, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*chat_service.GetAllMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMessageServiceClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMessageServiceClient)(nil).GetAll), varargs...)
}

// Update mocks base method.
func (m *MockMessageServiceClient) Update(ctx context.Context, in *chat_service.ChatMessage, opts ...grpc.CallOption) (*chat_service.ChatMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*chat_service.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMessageServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageServiceClient)(nil).Update), varargs...)
}

// MockMessageServiceServer is a mock of MessageServiceServer interface.
type MockMessageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceServerMockRecorder
}

// MockMessageServiceServerMockRecorder is the mock recorder for MockMessageServiceServer.
type MockMessageServiceServerMockRecorder struct {
	mock *MockMessageServiceServer
}

// NewMockMessageServiceServer creates a new mock instance.
func NewMockMessageServiceServer(ctrl *gomock.Controller) *MockMessageServiceServer {
	mock := &MockMessageServiceServer{ctrl: ctrl}
	mock.recorder = &MockMessageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageServiceServer) EXPECT() *MockMessageServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageServiceServer) Create(arg0 context.Context, arg1 *chat_service.ChatMessage) (*chat_service.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*chat_service.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMessageServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMessageServiceServer) Delete(arg0 context.Context, arg1 *chat_service.ChatIdRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageServiceServer)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockMessageServiceServer) GetAll(arg0 context.Context, arg1 *chat_service.GetAllMessagesParams) (*chat_service.GetAllMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*chat_service.GetAllMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMessageServiceServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMessageServiceServer)(nil).GetAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockMessageServiceServer) Update(arg0 context.Context, arg1 *chat_service.ChatMessage) (*chat_service.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*chat_service.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMessageServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedMessageServiceServer mocks base method.
func (m *MockMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServiceServer")
}

// mustEmbedUnimplementedMessageServiceServer indicates an expected call of mustEmbedUnimplementedMessageServiceServer.
func (mr *MockMessageServiceServerMockRecorder) mustEmbedUnimplementedMessageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServiceServer", reflect.TypeOf((*MockMessageServiceServer)(nil).mustEmbedUnimplementedMessageServiceServer))
}

// MockUnsafeMessageServiceServer is a mock of UnsafeMessageServiceServer interface.
type MockUnsafeMessageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMessageServiceServerMockRecorder
}

// MockUnsafeMessageServiceServerMockRecorder is the mock recorder for MockUnsafeMessageServiceServer.
type MockUnsafeMessageServiceServerMockRecorder struct {
	mock *MockUnsafeMessageServiceServer
}

// NewMockUnsafeMessageServiceServer creates a new mock instance.
func NewMockUnsafeMessageServiceServer(ctrl *gomock.Controller) *MockUnsafeMessageServiceServer {
	mock := &MockUnsafeMessageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMessageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMessageServiceServer) EXPECT() *MockUnsafeMessageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMessageServiceServer mocks base method.
func (m *MockUnsafeMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessageServiceServer")
}

// mustEmbedUnimplementedMessageServiceServer indicates an expected call of mustEmbedUnimplementedMessageServiceServer.
func (mr *MockUnsafeMessageServiceServerMockRecorder) mustEmbedUnimplementedMessageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessageServiceServer", reflect.TypeOf((*MockUnsafeMessageServiceServer)(nil).mustEmbedUnimplementedMessageServiceServer))
}
